#!/bin/sh

. ./profile
if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

clock () {
    while true; do
	date +"S %a, %b %-d, %Y at %r"
        sleep 1
    done
}

brightnessmon() {
    dir="/sys/class/backlight/intel_backlight/"
    [ -d "$dir" ] || return
    max="$(cat "$dir/max_brightness")"
    while true; do
	cur="$(cat "$dir/brightness")"
	b="$((100*cur/max))"
	echo "B${b}"
	inotifywait "$dir/brightness" >/dev/null 2>&1
    done
}

playpausepoll() {
    while true; do
	playerctlstate status
	sleep 3
    done |
    sed -u -e 's/Stopped/P/' -e '/No/d' -e 's/Playing/P/' -e 's/Paused/P/'
}

playpausemon() {
    {
	echo 'string "PlaybackStatus"'
	dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify \
	    /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get \
	    string:org.mpris.MediaPlayer2.Player string:PlaybackStatus
	dbus-monitor "type='signal',path='/org/mpris/MediaPlayer2'"
    } | awk '
	/string *"PlaybackStatus/{
	  while(1) {
	    getline line
	    if (line ~ /string "/) {
		sub(/.*string "/, "", line)
		sub(/".*$/, "", line)
		printf "%s\n", line
		fflush(stdout)
		break
	    }
	  }
	}' |
	sed -u -e 's/Playing/P/' -e 's/Paused/P/' -e 's/Stopped/P/'
}

mediapoll() {
    while true; do
	playerctlstate metadata --format 'Q{{artist}} - {{title}}' 2>&1
	sleep 3
    done |
    awk '
	/No players found/ {
	    print "Q"
	    print "P"
	    fflush(stdout)
	    next
	}
	{
	    print $0
	    fflush(stdout)
	}
    '
}

mediamon () {
    dbus-monitor "type='signal',path='/org/mpris/MediaPlayer2'" |
    awk '
	/string  *"xesam:artist/ {
	    while (1) {
		getline line
		if (line ~ /string "/) {
		    sub(/.*string "/, "", line)
		    sub(/".*$/, "", line)
		    printf "Q%s - ", line
		    break
		}
	    }
	}
	/string  *"xesam:title/ {
	    while (1) {
		getline line
		if (line ~ /string "/) {
		    sub(/.*string "/, "", line)
		    sub(/"\s*$/, "", line)
		    print line
		    fflush(stdout)
		    break
		}
	    }
	}
    '
}

volume() {
    pactl subscribe |
    awk '
	BEGIN {
	    print "M"
	    fflush(stdout)
	}
	/new/ {
	    if (++n==2) {
		print "M"
		fflush(stdout)
		n=0
	    }
	}
    ' |
    while read event; do
	mix="$(amixer sget Master | grep 'Left: Playback')"
	vol="$(echo "$mix" | grep -o '\[[[:digit:]]\+%\]' | tr -d '[]')"
	mute="$(echo "$mix" | grep -o '\[\(on\|off\)\]' |
	    sed -e 's/\[on\]//' -e 's/\[off\]//')"
	echo "V${mute} ${vol}"
    done
}

iface() {
    case "$(hostname)" in
    tini)
	exc=",eno1"
	;;
    esac
    exc="\"lo,docker,virbr,vboxnet,veth,br$exc\""
    {
	ip -4 -o monitor link address &
	while true; do
	    echo event
	    sleep 3m
	done
    } |
    while read event; do
	ip -j addr |
	jq --argjson exc "$exc" -r '
	    map(select(.ifname as $i |
		    $exc |
		    split(",") |
		    map(. as $pre |
			$i |
			startswith($pre)
		    ) |
		    any |
		    not
		)
	    ) | .[] |
	    "\(.ifname) \(.addr_info |
		map(select(.family=="inet")) |
		map(.local) |
		join(", ")
	    )"
	' | {
	    l=0
	    printf "%s" "%{R}"
	    while read iface addr; do
		[ -n "$addr" ] && state="up" || state="down"
		[ "$l" -eq 1 ] && printf " "
		printf "%s" "%{R}"
		[ "$l" -eq 2 ] && printf " "
		ssid="$(iwgetid --raw $iface)" &&
		    printf " $iface $state${addr:+ }$addr${ssid:+ }$ssid" ||
		    printf "$iface $state${addr:+ }$addr"
		case "$l" in
		0) l=1;;
		1) l=2;;
		2) l=1;;
		esac
	    done
	    printf "%s\n" "%{F-}%{B-}"
	} |
	sed -u -e 's/^/I/'
    done
}

battery() {
    dir='/sys/class/power_supply/BAT0'
    [ -d "$dir" ] || return
    while true; do
	status="$(cat "$dir/status" |
	    sed -e '/Unknown/d' \
		-e 's/Charging//g' \
		-e 's/Discharging//g' \
		-e 's/Full//g')"
	capacity="$(cat "$dir/capacity")"
	echo "A${status}${status:+ }${capacity}%"
	inotifywait "$dir/status" "$dir/capacity"
    done
}

case "$(hostname)" in
tini)
    xtitle -sf 'T%s\n' > "$PANEL_FIFO" &
    ;;
esac
clock > "$PANEL_FIFO" &
brightnessmon > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &
mediamon > "$PANEL_FIFO" &
mediapoll > "$PANEL_FIFO" &
playpausemon > "$PANEL_FIFO" &
playpausepoll > "$PANEL_FIFO" &
volume > "$PANEL_FIFO" &
iface > "$PANEL_FIFO" &
battery > "$PANEL_FIFO" &

trayer --edge top --align right --transparent true --SetDockType false --alpha 0 --widthtype request --height "$((PANEL_HEIGHT-4))" --tint 0x292b2e --expand true &
while ! xdo id -a panel >/dev/null 2>&1; do sleep 0.1; done; xprop -name panel -f WM_SIZE_HINTS 32i ' $5\n' -spy WM_NORMAL_HINTS | sed -u -e 's/WM_NORMAL_HINTS(WM_SIZE_HINTS)/X/g' > "$PANEL_FIFO" &

. ./panel_colors

./panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -u 2 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "Ubuntu Mono:size=$PANEL_FONT_SZ" -f "Font Awesome:size=$PANEL_FONT_SZ" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" | sh &

wid=$(xdo id -m -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
